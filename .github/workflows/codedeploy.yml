name: Deploy to Amazon ECS
run-name: Bukcle up ${{ github.actor }} is deploying to ECS ðŸš€
on:
  push:
    paths-ignore:
    - 'iac/**'
    branches:
      - master
env:  
  AWS_REGION: us-east-1               
  ECR_REPOSITORY: consumer          
  ECR_REPOSITORY_URL: 999497899334.dkr.ecr.us-east-1.amazonaws.com
  ECS_SERVICE: devopstest-ConsumerService-FTTkNsmNBens #service name              
  ECS_CLUSTER: devopstest             # cluster name  
  ECS_TASK_DEFINITION: taskDefinition.json # taskdefinition.json
  CONTAINER_NAME: consumer           # container name  
                                               
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3      

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.                    

          cd consumer
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URL }}
          docker build -t ${{ env.ECR_REPOSITORY }} .          
          docker tag ${{ env.ECR_REPOSITORY }} ${{ env.ECR_REPOSITORY_URL }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_REPOSITORY_URL }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=${{ env.ECR_REPOSITORY_URL }}/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  